import{_ as e,o as r,c as i,a as o}from"./app-f3d0b7f1.js";const t={},d=o('<h1 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h1><h2 id="container" tabindex="-1"><a class="header-anchor" href="#container" aria-hidden="true">#</a> Container</h2><h3 id="containeraccessor-getrootcontainer-container" tabindex="-1"><a class="header-anchor" href="#containeraccessor-getrootcontainer-container" aria-hidden="true">#</a> <code>ContainerAccessor.getRootContainer(): Container</code></h3><p>Get the global root container.</p><h3 id="containeraccessor-resetrootcontainer-void" tabindex="-1"><a class="header-anchor" href="#containeraccessor-resetrootcontainer-void" aria-hidden="true">#</a> <code>ContainerAccessor.resetRootContainer(): void</code></h3><p>Reset the global root container. All bindings will be removed.</p><h2 id="decorators" tabindex="-1"><a class="header-anchor" href="#decorators" aria-hidden="true">#</a> Decorators</h2><h3 id="injectable-classdecorator" tabindex="-1"><a class="header-anchor" href="#injectable-classdecorator" aria-hidden="true">#</a> <code>@Injectable(): ClassDecorator</code></h3><p>Declare a dependency as injectable.</p><h3 id="provide-options-classdecorator" tabindex="-1"><a class="header-anchor" href="#provide-options-classdecorator" aria-hidden="true">#</a> <code>@Provide(options?): ClassDecorator</code></h3><p>Declare a dependency as injectable and provide it to the container automatically when the decorator is applied.</p><ul><li><code>options</code>: Provide options.</li></ul><h3 id="inject-id-parameterdecorator-propertydecorator" tabindex="-1"><a class="header-anchor" href="#inject-id-parameterdecorator-propertydecorator" aria-hidden="true">#</a> <code>@Inject(id?): ParameterDecorator | PropertyDecorator</code></h3><p>Inject a dependency.</p><ul><li><code>id</code>: The dependency identifier.</li></ul><h3 id="multiinject-id-parameterdecorator-propertydecorator" tabindex="-1"><a class="header-anchor" href="#multiinject-id-parameterdecorator-propertydecorator" aria-hidden="true">#</a> <code>@MultiInject(id?): ParameterDecorator | PropertyDecorator</code></h3><p>Inject all matching dependencies as an array (multi-injection).</p><ul><li><code>id</code>: The dependency identifier.</li></ul><h3 id="optional-parameterdecorator-propertydecorator" tabindex="-1"><a class="header-anchor" href="#optional-parameterdecorator-propertydecorator" aria-hidden="true">#</a> <code>@Optional(): ParameterDecorator | PropertyDecorator</code></h3><p>Optionally inject a dependency only if it is already bound in the container.</p><h3 id="injectrootcontainer-parameterdecorator-propertydecorator" tabindex="-1"><a class="header-anchor" href="#injectrootcontainer-parameterdecorator-propertydecorator" aria-hidden="true">#</a> <code>@InjectRootContainer(): ParameterDecorator | PropertyDecorator</code></h3><p>Inject the root container object.</p><h3 id="decoratorutility-createprovidedecoratorfactory-presetoptions-lifecycleoptions-options-classdecorator" tabindex="-1"><a class="header-anchor" href="#decoratorutility-createprovidedecoratorfactory-presetoptions-lifecycleoptions-options-classdecorator" aria-hidden="true">#</a> <code>DecoratorUtility.createProvideDecoratorFactory(presetOptions, lifeCycleOptions?): (options?) =&gt; ClassDecorator</code></h3><p>Create Provide decorator factory.</p><ul><li><code>presetOptions</code>: The preset default options.</li><li><code>lifeCycleOptions</code>: The life cycle options to be called while registering provider.</li></ul><h2 id="deferred-scope" tabindex="-1"><a class="header-anchor" href="#deferred-scope" aria-hidden="true">#</a> Deferred Scope</h2><h3 id="deferredscopeutility-createdeferredscopecontainer-parentcontainer-container" tabindex="-1"><a class="header-anchor" href="#deferredscopeutility-createdeferredscopecontainer-parentcontainer-container" aria-hidden="true">#</a> <code>DeferredScopeUtility.createDeferredScopeContainer(parentContainer?): Container</code></h3><p>Create a deferred scope sub container.</p><p>All deferred scope providers will be bound to this sub container.</p><ul><li><code>parentContainer</code>: The parent container (default to root container).</li></ul><h3 id="deferredscopeutility-getdeferredscopeprovidersbyid-id-deferredscopeprovider" tabindex="-1"><a class="header-anchor" href="#deferredscopeutility-getdeferredscopeprovidersbyid-id-deferredscopeprovider" aria-hidden="true">#</a> <code>DeferredScopeUtility.getDeferredScopeProvidersById(id): DeferredScopeProvider[]</code></h3><p>Get deferred scope providers of specified identifier.</p><ul><li><code>id</code>: The dependency identifier.</li></ul><h2 id="utilities" tabindex="-1"><a class="header-anchor" href="#utilities" aria-hidden="true">#</a> Utilities</h2><h3 id="diutility-getresolvedidentifier-idortarget-dependencyidentifier" tabindex="-1"><a class="header-anchor" href="#diutility-getresolvedidentifier-idortarget-dependencyidentifier" aria-hidden="true">#</a> <code>DIUtility.getResolvedIdentifier(idOrTarget): DependencyIdentifier</code></h3><p>Get resolved identifier of the dependency that can be used in the container.</p><p>If the identifier is a string, it will be converted to <code>Provide&lt;${string}&gt;</code>, otherwise the provided identifier will be used directly.</p><ul><li><code>idOrTarget</code>: The specified identifier token or the target class.</li></ul><h3 id="diutility-bindprovider-options-container-binding" tabindex="-1"><a class="header-anchor" href="#diutility-bindprovider-options-container-binding" aria-hidden="true">#</a> <code>DIUtility.bindProvider(options, container?): Binding</code></h3><p>Bind a provider to the container.</p><ul><li><code>options</code>: The options of provider.</li><li><code>container</code>: The container to bind to, default to root container.</li></ul><h3 id="diutility-provideclass-options-binding" tabindex="-1"><a class="header-anchor" href="#diutility-provideclass-options-binding" aria-hidden="true">#</a> <code>DIUtility.provideClass(options): Binding</code></h3><p>Provide a class as a dependency.</p><ul><li><code>options</code>: Provider options.</li></ul><h3 id="diutility-providevalue-options-binding" tabindex="-1"><a class="header-anchor" href="#diutility-providevalue-options-binding" aria-hidden="true">#</a> <code>DIUtility.provideValue(options): Binding</code></h3><p>Provide a value as a dependency.</p><ul><li><code>options</code>: Provider options.</li></ul><h3 id="diutility-getdependency-t-id-container-t" tabindex="-1"><a class="header-anchor" href="#diutility-getdependency-t-id-container-t" aria-hidden="true">#</a> <code>DIUtility.getDependency&lt;T&gt;(id, container?): T</code></h3><p>Get the dependency by the specified identifier.</p><ul><li><code>id</code>: The dependency identifier.</li><li><code>container</code>: The container to get the dependency from (default to root container).</li></ul>',50),a=[d];function n(c,s){return r(),i("div",null,a)}const p=e(t,[["render",n],["__file","reference.html.vue"]]);export{p as default};
