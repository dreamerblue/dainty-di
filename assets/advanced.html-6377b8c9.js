import{_ as n,o as s,c as a,a as e}from"./app-f3d0b7f1.js";const t={},o=e(`<h1 id="advanced" tabindex="-1"><a class="header-anchor" href="#advanced" aria-hidden="true">#</a> Advanced</h1><h2 id="optional-injection" tabindex="-1"><a class="header-anchor" href="#optional-injection" aria-hidden="true">#</a> Optional Injection</h2><p>By default, if the dependency cannot be found, an exception is thrown. You can use <code>@Optional</code> to make the injection optional:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide<span class="token punctuation">,</span> Optional <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dainty-di&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Optional</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">private</span> foo<span class="token operator">?</span><span class="token operator">:</span> Foo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="multiple-injection" tabindex="-1"><a class="header-anchor" href="#multiple-injection" aria-hidden="true">#</a> Multiple Injection</h2><p>If there are multiple providers for the same identifier, an exception is thrown on injection because the DI system cannot determine which unique dependency needs to be resolved. Use <code>@MultiInject</code> when you explicitly need to inject multiple dependencies:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide<span class="token punctuation">,</span> MultiInject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dainty-di&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> IFoo <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;IFoo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">IFoo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> IFoo <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">implements</span> <span class="token class-name">IFoo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> IFoo <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">AnotherFoo</span> <span class="token keyword">implements</span> <span class="token class-name">IFoo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">MultiInject</span></span><span class="token punctuation">(</span>IFoo<span class="token punctuation">)</span> <span class="token keyword">private</span> foos<span class="token operator">:</span> IFoo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="child-container" tabindex="-1"><a class="header-anchor" href="#child-container" aria-hidden="true">#</a> Child Container</h2><p>You can create a child container from a parent container. The child container will inherit all the bindings from the parent container.</p><p>When looking up a dependency from the specified container, if the dependency with the specified identifier cannot be found in the current container, it is recursively looked up in the parent container. If the dependency cannot be found, an exception is thrown.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ContainerAccessor<span class="token punctuation">,</span> DIUtility <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dainty-di&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> rootContainer <span class="token operator">=</span> ContainerAccessor<span class="token punctuation">.</span><span class="token function">getRootContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> childContainer <span class="token operator">=</span> rootContainer<span class="token punctuation">.</span><span class="token function">createChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

DIUtility<span class="token punctuation">.</span><span class="token function">provideValue</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    id<span class="token operator">:</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;answer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    value<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  childContainer<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

DIUtility<span class="token punctuation">.</span><span class="token function">getDependency</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;answer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> childContainer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deferred-providers" tabindex="-1"><a class="header-anchor" href="#deferred-providers" aria-hidden="true">#</a> Deferred Providers</h2><p>In some cases, you may want the dependency provider to defer being bound to the container. A common usage scenario is request scopes for web frameworks.</p><p>These scopes exist only for the lifetime of an HTTP request, all dependencies are resolved and instantiated at the beginning of the request, and they tend to be related to specific information on a single request, such as the request context (often referred to <code>ctx</code>).</p><p>To solve this, you can use the <code>Deferred</code> or <code>DeferredTransient</code> scope. With such scope, the dependency provider will only be bound until a deferred container (that is, the request container in this example) is created.</p><p>Here is a simplified example with Koa:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide<span class="token punctuation">,</span> ProviderScope<span class="token punctuation">,</span> Inject<span class="token punctuation">,</span> DeferredScopeUtility<span class="token punctuation">,</span> DIUtility <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dainty-di&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> scope<span class="token operator">:</span> ProviderScope<span class="token punctuation">.</span>Deferred <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token string">&#39;ctx&#39;</span><span class="token punctuation">)</span> ctx<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> ctx<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// At your request handler middleware</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Create a request scope container for each request</span>
  <span class="token comment">// All deferred providers will be bound to this container automatically</span>
  <span class="token keyword">const</span> requestContainer <span class="token operator">=</span> DeferredScopeUtility<span class="token punctuation">.</span><span class="token function">createDeferredScopeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// We need to bind the current request context object to the container</span>
  <span class="token comment">// so that the \`Foo\` can access the request context</span>
  DIUtility<span class="token punctuation">.</span><span class="token function">provideValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;ctx&#39;</span><span class="token punctuation">,</span>
    value<span class="token operator">:</span> ctx<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Get the instance of the \`Foo\` with the current request context</span>
  <span class="token keyword">const</span> foo <span class="token operator">=</span> DIUtility<span class="token punctuation">.</span><span class="token function">getDependency</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> requestContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="custom-provider-factory" tabindex="-1"><a class="header-anchor" href="#custom-provider-factory" aria-hidden="true">#</a> Custom Provider Factory</h2><p>Sometimes you may want to wrap <code>@Provide</code> decorator of your own (e.g. <code>@Service</code>). Dainty DI provides you with utilities to create a decorator factory with default options:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> DependencyIdentifier<span class="token punctuation">,</span> DecoratorUtility<span class="token punctuation">,</span> ProviderScope <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dainty-di&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Service</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  options<span class="token operator">:</span> <span class="token punctuation">{</span>
    id<span class="token operator">?</span><span class="token operator">:</span> DependencyIdentifier<span class="token punctuation">;</span>
    condition<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    override<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> DecoratorUtility<span class="token punctuation">.</span><span class="token function">createProvideDecoratorFactory</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// Set the default scope to transient</span>
      <span class="token comment">// (and in this case, cannot be overridden)</span>
      scope<span class="token operator">:</span> ProviderScope<span class="token punctuation">.</span>Transient<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      beforeProvide<span class="token operator">:</span> <span class="token builtin">console</span><span class="token punctuation">.</span>log<span class="token punctuation">,</span>
      afterProvide<span class="token operator">:</span> <span class="token builtin">console</span><span class="token punctuation">.</span>log<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Service</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),p=[o];function c(i,l){return s(),a("div",null,p)}const r=n(t,[["render",c],["__file","advanced.html.vue"]]);export{r as default};
